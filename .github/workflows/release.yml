name: Release

on:
  push:
    branches:
      - 'release/*'  # 当推送到 release/* 分支时触发

concurrency: ${{ github.workflow }}-${{ github.ref }}  # 确保同一时间只运行一个相同的工作流

permissions:
  contents: write  # 允许写入仓库内容
  pull-requests: write  # 允许创建和更新 PR

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo  # 检出代码仓库
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 完整克隆，包含所有历史
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js  # 设置 Node.js 环境
        uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm  # 设置 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory  # 获取 pnpm 缓存目录
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache  # 设置 pnpm 缓存
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Dependencies  # 安装依赖
        run: pnpm install
        
      - name: Build and Test  # 构建和测试项目
        run: |
          pnpm build
          pnpm lint

      - name: Create NPM Configuration  # 创建 NPM 配置
        if: ${{ github.ref == 'refs/heads/main' }}  # 仅在 main 分支执行
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Configure release script  # 配置发布脚本
        if: ${{ github.ref == 'refs/heads/main' }}  # 仅在 main 分支执行
        run: |
          # 修改发布脚本确保使用--access public
          if [ -f "package.json" ]; then
            # 检查是否已有发布脚本
            if grep -q '"release"' "package.json"; then
              # 更新发布脚本确保使用--access public
              sed -i 's/"release": *"[^"]*"/"release": "changeset publish --access public"/' package.json
            else
              # 添加发布脚本
              sed -i '/"scripts": *{/a \    "release": "changeset publish --access public",' package.json
            fi
            echo "Updated release script in package.json"
          fi
        
      - name: Create .changesetrc.json if needed  # 创建 .changesetrc.json 配置文件
        if: ${{ github.ref == 'refs/heads/main' }}  # 仅在 main 分支执行
        run: |
          # 创建或更新 .changesetrc.json 文件，确保使用 --access public
          echo '{
            "access": "public",
            "baseBranch": "main",
            "changelog": "@changesets/cli/changelog",
            "commit": false,
            "linked": [],
            "updateInternalDependencies": "patch",
            "ignore": []
          }' > .changesetrc.json
        
      - name: Prepare Release (Release Branch)  # 在 release 分支准备发布
        if: ${{ startsWith(github.ref, 'refs/heads/release/') }}  # 仅在 release/* 分支执行
        run: |
          echo "Preparing a release on the release branch"
          pnpm changeset version  # 更新版本号
          
          if [[ -n $(git status --porcelain) ]]; then  # 如有更改则提交
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git add .
            git commit -m "Version packages for release"
            git push
          fi
        
      - name: Custom Publish (Main Branch)  # 在 main 分支发布
        if: ${{ github.ref == 'refs/heads/main' }}  # 仅在 main 分支执行
        run: |
          # 首先更新版本号
          pnpm changeset version
          
          # 使用pnpm发布所有包，传递--access public参数
          echo "Publishing packages with public access..."
          pnpm publish -r --access public --no-git-checks  # 发布所有包，设为公开访问，不检查 git 状态
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }} 